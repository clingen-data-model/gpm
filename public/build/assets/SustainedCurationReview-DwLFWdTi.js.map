{"version":3,"file":"SustainedCurationReview-DwLFWdTi.js","sources":["../../../resources/js/repositories/base_repository.js","../../../resources/js/repositories/comment_repository.js","../../../resources/js/composables/comment_manager.js","../../../resources/js/forms/base_entity_form.js","../../../resources/js/repositories/comment_type_repository.js","../../../resources/js/forms/comment_form.js","../../../resources/js/components/expert_panels/ReviewCommentForm.vue","../../../resources/js/components/expert_panels/ReviewComment.vue","../../../resources/js/components/expert_panels/ReviewSection.vue","../../../resources/js/components/expert_panels/ReviewMembership.vue","../../../resources/js/components/expert_panels/DefinitionReview.vue","../../../resources/js/components/expert_panels/SustainedCurationReview.vue"],"sourcesContent":["import { api, queryStringFromParams } from '@/http'\n\nexport default class BaseRepository {\n    constructor (baseUrl, options = {}) {\n        this.baseUrl = baseUrl\n        this.options = options\n    }\n\n    query (params) {\n        const queryString = queryStringFromParams(params)\n        return api.get(this.baseUrl+queryString).then(response =>  this.transformToEntity(response.data))\n    }\n\n    find (id) {\n        return api.get(`${this.baseUrl}/${id}`).then(response => this.transformToEntity(response.data))\n    }\n\n     save (data) {\n        return api.post(this.baseUrl, data).then(response => this.transformToEntity(response.data))\n    }\n    \n     update (data) {\n        return api.put(`${this.baseUrl}/${data.id}`, data).then(response => this.transformToEntity(response.data))\n    }\n    \n     destroy (item) {\n        return api.delete(`${this.baseUrl}/${item.id}`)\n    }\n\n    transformToEntity(item) {\n        if (!this.options.entityClass) {\n            return item;\n        }\n\n        if (Array.isArray(item)) {\n            // ignoring lint because I cannot be bothered to change the backend data\n            // eslint-disable-next-line new-cap\n            return item.map(i => new this.options.entityClass(i))\n        }\n        return item;\n    }\n}","import BaseRepository from './base_repository.js'\nimport {api} from '@/http'\n\n\nconst commentRepository = (new BaseRepository('/api/comments'));\ncommentRepository.resolve = (id) => {\n    return api.post(`/api/comments/${id}/resolved`)\n            .then(response => response.data);\n}\ncommentRepository.unresolve = (id) => {\n    return api.post(`/api/comments/${id}/unresolved`)\n            .then(response => response.data);\n}\n\nexport {commentRepository};\n\nexport default commentRepository;\n","import {ref, computed} from 'vue'\nimport commentRepository from '../repositories/comment_repository';\n\nconst types = {\n    internal: 1,\n    suggestion: 2,\n    requirement: 3\n};\n\nexport default (subjectType, subjectId) => {\n    const comments = ref([]);\n\n    const openComments = computed(() => comments.value.filter(c => !c.is_resolved))\n    const openRequirements = computed(() => openComments.value.filter(c =>  c.comment_type_id === types.requirement));\n    const openSuggestions = computed(() => openComments.value.filter(c =>  c.comment_type_id === types.suggestion));\n    const commentsForEp = computed(() => [...openRequirements.value, ...openSuggestions.value])\n    const openInternal = computed(() => openComments.value.filter(c => c.comment_type_id === types.internal));\n\n    const findCommentIndex = (comment) => {\n        return comments.value.findIndex(c => c.id === comment.id)\n    }\n\n    const getComments = async () => {\n        comments.value = await commentRepository.query({where: {\n            subject_type: subjectType,\n            subject_id: subjectId\n        }})\n    }\n\n    const addComment = (comment) => comments.value.push(comment);\n    const removeComment = (comment) => comments.value.splice(findCommentIndex(comment), 1);\n    const updateComment = (comment) => comments.value[findCommentIndex(comment)] = comment;\n\n    return {\n        subject: {\n            type: subjectType,\n            id: subjectId\n        },\n        comments,\n        openComments,\n        openRequirements,\n        openSuggestions,\n        openInternal,\n        getComments,\n        addComment,\n        removeComment,\n        updateComment,\n        commentsForEp\n    }\n}\n","import {ref} from 'vue';\nimport {isValidationError} from '@/http'\n\nclass BaseEntityForm {\n    constructor(fields, repository) {\n        this.fields = fields;\n        this.repo = repository\n        \n        this.currentItem = ref({})\n        this.originalItem = ref({})\n        this.errors = ref({})\n    }\n\n     async find (id) {\n        return await this.repo.find(id)\n            .then(data => {\n                this.currentItem.value = data\n                this.originalItem.value = data\n                return data\n            });\n    }\n\n     async save (data) {\n        this.clearErrors()\n        try {\n            const newItem = await this.repo.save(data)\n            this.clearCurrentItem()\n            return newItem;\n        } catch (e) {\n            if (isValidationError(e)) {\n                this.errors.value = e.response.data.errors\n            }\n            throw e\n        }\n    }\n    \n     async update (data) {\n        this.clearErrors()\n        try {\n            this.currentItem.value = this.repo.update(data)\n            return this.currentItem.value\n        } catch (e) {\n            if (isValidationError(e)) {\n                this.errors.value = e.response.data.errors\n            }\n            throw e\n        }\n    }\n    \n     async destroy (item) {\n        this.repo.destroy(item)\n    }\n    \n    cancel () {\n        this.clearErrors()\n        if (!this.currentItem.value.id) {\n            this.clearCurrentItem()\n        }\n    }\n    \n    clearCurrentItem () {\n        this.currentItem.value = {}\n    }\n    \n    clearErrors () {\n        this.errors.value = {}\n    }\n}\n\nexport default BaseEntityForm","import BaseRepository from './base_repository.js'\n\nclass CommentTypeRepository extends BaseRepository\n{\n    constructor (baseUrl, options = {}) {\n        super(baseUrl, options);\n        this.cachedList = null;\n    }\n\n    query (params) {\n        if (!this.cachedList) {\n            const results = super.query(params)\n            this.cachedList = results;\n        }\n\n        return this.cachedList\n    }\n    \n    // eslint-disable-next-line unused-imports/no-unused-vars\n    find (id) {\n        throw new Error('CommentTypeRepository.find not implemented');\n    }\n\n    // eslint-disable-next-line unused-imports/no-unused-vars\n    save (data) {\n        throw new Error('CommentTypeRepository.save not implemented');\n    }\n\n    // eslint-disable-next-line unused-imports/no-unused-vars\n    update (id) {\n        throw new Error('CommentTypeRepository.update not implemented');\n    }\n\n    // eslint-disable-next-line unused-imports/no-unused-vars\n    destroy (id) {\n        throw new Error('CommentTypeRepository.destroy not implemented');\n    }\n}\n\nexport const typeRepository = (new CommentTypeRepository('/api/comment-types'));\nexport default typeRepository","import {ref} from 'vue'\nimport BaseEntityForm from \"./base_entity_form.js\";\nimport commentRepository from '@/repositories/comment_repository.js'\nimport typeRepository from '@/repositories/comment_type_repository.js'\n\nexport const commentTypes = ref([]);\nexport const getCommentTypes = async () => {\n    return await typeRepository.query()\n            .then(items => {\n                commentTypes.value = items.map(i => ({label: i.name, value: i.id}));\n                return commentTypes.value;\n            });\n};\n\nexport const fields = ref([\n    {\n        name: 'comment_type_id',\n        label: 'Type',\n        type: 'select',\n        options: commentTypes,\n        required: true,\n    },\n    {\n        name: 'content',\n        label: 'Comment',\n        type: 'large-text',\n        required: true,\n    },\n]);\n\n\nexport default () => {\n    getCommentTypes();\n\n    return (new BaseEntityForm(fields, commentRepository))\n}","<script setup>\n    import { computed, onMounted, inject } from 'vue';\n    import formDefFactory from '../../forms/comment_form.js';\n\n    const props = defineProps({\n        commentManager: {\n            type: Object,\n            required: true\n        },\n        section: {\n            type: [String, null],\n            default: null\n        },\n        subjectType: {\n            type: String,\n            default: 'App\\\\Modules\\\\Group\\\\Models\\\\Group'\n        },\n        subjectId: {\n            type: Number,\n            required: false\n        },\n        comment: {\n            type: Object,\n        },\n        onlyInternal: {\n            type: Boolean,\n            default: false\n        }\n    });\n\n    const emits = defineEmits(['saved', 'canceled']);\n\n    const group = inject('group');\n\n    const formDef = formDefFactory();\n\n    onMounted(() => {\n        if (props.comment) {\n            formDef.currentItem.value = props.comment\n        }\n    })\n\n    const fields = computed(() => {\n        const fields = [...formDef.fields.value];\n        if (props.onlyInternal) {\n            const typeFieldIdx = fields.findIndex(f => f.name === 'comment_type_id');\n            fields.splice(typeFieldIdx, 1);\n        }\n        return fields;\n    })\n    const errors = computed(() => {\n        return formDef.errors.value\n    })\n\n    const newComment = computed({\n        get () {\n            return formDef.currentItem.value\n        },\n        set (value) {\n            formDef.currentItem.value = value\n        }\n    })\n\n    const cancel = () => {\n        formDef.clearCurrentItem()\n        formDef.clearErrors()\n        emits('canceled')\n    }\n\n    const create = () => {\n        newComment.value.subject_type = props.subjectType\n        newComment.value.subject_id = props.subjectId || group.value.id\n        newComment.value.metadata = {\n            section: props.section,\n            // This metadata is necessary to ensure reply comments are included in notifications.\n            root_subject_type: 'App\\\\Modules\\\\Group\\\\Models\\\\Group',\n            root_subject_id: group.value.id\n        }\n\n        if (props.onlyInternal) {\n            newComment.value.comment_type_id = 1\n        }\n        formDef.save(newComment.value)\n            .then(comment => {\n                props.commentManager.addComment(comment);\n                emits('saved', comment);\n            })\n    }\n\n    const update = () => {\n        if (props.onlyInternal) {\n            newComment.value.comment_type_id = 1\n        }\n        formDef.update(newComment.value)\n            .then(comment => {\n                props.commentManager.updateComment(comment);\n                emits('saved', comment);\n            })\n    }\n\n    const save = () => {\n        if (newComment.value.id) {\n            update();\n            return;\n        }\n        create();\n    }\n</script>\n<template>\n  <div>\n    <data-form v-model=\"newComment\" :fields=\"fields\" :errors=\"errors\" />\n    <button-row size=\"xs\" submit-text=\"Save\" @submitted=\"save\" @canceled=\"cancel\" />\n  </div>\n</template>\n","<script setup>\n    import {ref, computed, onMounted} from 'vue'\n    import {useStore} from 'vuex'\n    import ReviewCommentForm from './ReviewCommentForm.vue'\n    import commentFormFactory from '@/forms/comment_form.js'\n    import commentRepository from '../../repositories/comment_repository';\n    import DropdownItem from '../DropdownItem.vue';\n    import commentManagerFactory from '@/composables/comment_manager.js'\n    import {hasPermission} from '../../auth_utils';\n\n    const props = defineProps({\n        comment: {\n            type: Object,\n            required: true\n        },\n        commentManager: {\n            type: Object,\n            required: true\n        }\n    });\n\n    const emits = defineEmits(['created', 'updated', 'resolved', 'unresolved', 'deleted']);\n\n    const store = useStore();\n\n    const formDef = commentFormFactory();\n    const replyManager = ref(commentManagerFactory('App\\\\Models\\\\Comment', props.comment.id))\n\n    const showEditForm = ref(false);\n    const showConfirmDelete = ref(false);\n\n    const getVariant = comment => {\n        if (!comment.type) {\n            return 'gray'\n        }\n        switch (comment.type.name) {\n            case 'required revision':\n                return 'yellow'\n            case 'suggestion':\n                return 'blue'\n            case 'internal comment':\n                return 'gray'\n            default:\n                break\n        }\n    }\n\n    const initDelete = () => {\n        showConfirmDelete.value = true\n    }\n    const deleteComment = () => {\n        formDef.destroy(props.comment)\n            .then(() => {\n                showConfirmDelete.value = false;\n                props.commentManager.removeComment(props.comment);\n                emits('deleted', props.comment);\n            })\n    }\n\n    const toggleResolution = async () => {\n        if (props.comment.is_resolved) {\n            const updatedCmt = await commentRepository.unresolve(props.comment.id)\n            props.commentManager.updateComment(updatedCmt)\n            emits('updated');\n            emits('resolved');\n            return;\n        }\n\n        const updatedCmt = await commentRepository.resolve(props.comment.id)\n        props.commentManager.updateComment(updatedCmt)\n        emits('updated');\n        emits('unresolved');\n    }\n\n    const showReplyList = ref(false);\n    \n    const showReplies = () => {\n        replyManager.value.getComments()\n            .then(rsp => {\n                showReplyList.value = true;\n                return rsp;\n            });\n    }\n\n    const toggleReplies = async () => {\n        if (!showReplyList.value) {\n            showReplies();\n        }\n        showReplyList.value = !showReplyList.value;\n    }\n\n    const showReplyForm = ref(false);\n    const initReply = () => showReplyForm.value = true;\n    const handleNewReply = () => {\n        const commentClone = {...props.comment};\n        commentClone.comments_count += 1;\n        props.commentManager.updateComment(commentClone);\n        showReplyList.value = true;\n        showReplyForm.value = false;\n    }\n    const handleReplyRemoved = () => {\n        const commentClone = {...props.comment};\n        commentClone.comments_count -= 1;\n        props.commentManager.updateComment(commentClone);\n    }\n\n    onMounted(() => {\n        replyManager.value.getComments();\n    })\n\n    const canEdit = computed(() => hasPermission('comments-manage') || store.getters.currentUser.person.id === props.comment.creator_id)\n</script>\n<template>\n  <div class=\"my-2\">\n    <div class=\"comment-container\">\n      <div v-if=\"!showEditForm\" class=\"relative\">\n        <div class=\"flex justify-between items-start mb-1 rounded\">\n          <div class=\"flex space-x-2 items-end\">\n            <strong class=\"block\">{{ comment.creator && comment.creator.name }}</strong>\n            <badge class=\"block\" :color=\"getVariant(comment)\" size=\"xxs\">\n              {{ comment.type && titleCase(comment.type.name) }}\n            </badge>\n            <popper v-if=\"comment.is_resolved\" hover arrow content=\"Resolved\">\n              <icon-checkmark\n                class=\"text-green-500\"\n                title=\"Resolved\"\n              />\n            </popper>\n          </div>\n          <div class=\"flex space-x-2\">\n            <dropdown-menu v-if=\"canEdit\" hide-cheveron>\n              <DropdownItem @click=\"showEditForm = true\">\n                Edit\n              </DropdownItem>\n              <DropdownItem @click=\"toggleResolution\">\n                {{ comment.is_resolved ? 'Mark unresolved' : 'Resolve' }}\n              </DropdownItem>\n              <DropdownItem @click=\"initDelete\">\n                Delete\n              </DropdownItem>\n            </dropdown-menu>\n          </div>\n        </div>\n\n        <markdown-block :markdown=\"comment.content\" class=\"text-sm\" />\n        <button class=\"link\" @click=\"initReply\">\n          <icon-reply class=\"inline-block\" />Reply\n        </button>\n\n\n        <static-alert v-show=\"showConfirmDelete\" variant=\"danger\" class=\"\">\n          Continue with delete?\n          <button-row\n            size=\"xs\"\n            submit-text=\"Yes, delete\"\n            submit-variant=\"red\"\n            @submitted=\"deleteComment\"\n            @canceled=\"showConfirmDelete = false\"\n          />\n        </static-alert>\n      </div>\n      <ReviewCommentForm\n        v-else\n        :comment=\"comment\"\n        :comment-manager=\"commentManager\"\n        @canceled=\"showEditForm = false\"\n        @saved=\"showEditForm = false\"\n      />\n    </div>\n\n\n    <div class=\"replies ml-1\">\n      <ul v-if=\"showReplyList\">\n        <li\n          v-for=\"reply in replyManager.comments\" :key=\"reply.id\"\n          class=\"border-l-2 mt-2 px-2 py-1 bg-gray-100/50\"\n        >\n          <ReviewComment :comment=\"reply\" :comment-manager=\"replyManager\" @deleted=\"handleReplyRemoved\" />\n        </li>\n      </ul>\n      <button v-if=\"comment.comments_count > 0\" class=\"link text-sm\" @click=\"toggleReplies\">\n        {{ showReplyList ? 'Hide' : 'Show' }}\n        {{ comment.comments_count }}\n        {{ comment.comments_count > 1 ? 'replies' : 'reply' }}\n      </button>\n      <div v-show=\"showReplyForm\" class=\"border-l-2 mt-2 px-2 py-1 bg-gray-100/50\">\n        <strong>Your Reply</strong>\n        <ReviewCommentForm\n          subject-type=\"App\\Models\\Comment\"\n          :subject-id=\"comment.id\"\n          :only-internal=\"true\"\n          :comment-manager=\"replyManager\"\n          @saved=\"handleNewReply\"\n          @canceled=\"showReplyForm = false\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n","<script setup>\n    import { ref, computed, inject } from 'vue'\n    import ReviewComment from '@/components/expert_panels/ReviewComment.vue'\n    import ReviewCommentForm from './ReviewCommentForm.vue'\n\n    const props = defineProps({\n        title: {\n            type: String || null,\n            default: null\n        },\n        name: {\n            type: String || null,\n            default: null\n        },\n    });\n\n    const commentManager = inject('commentManager')\n\n    const showCommentForm = ref(false);\n\n    const showComments = ref(true)\n    const sectionComments = computed(() => {\n        if (!commentManager) {\n            return [];\n        }\n        return commentManager.value.comments.filter(c => {\n            if (c.metadata) {\n                return c.metadata.section === props.name\n            }\n            return false\n        })\n    })\n\n    const countColor = computed(() => {\n        if (!commentManager) {\n            return null;\n        }\n        if (sectionComments.value.find(c => c.type.name === 'required revision')) {\n            return 'yellow'\n        }\n        if (sectionComments.value.find(c => c.type.name === 'suggestion')) {\n            return 'blue'\n        }\n        return 'gray'\n    })\n</script>\n\n<template>\n  <section class=\"lg:flex lg:space-x-4 screen-block\">\n    <div class=\"overflow-x-auto flex-grow\" :class=\"{'lg:w-3/5': showComments}\">\n      <header class=\"flex justify-between items-start space-x-4\">\n        <h2 class=\"flex-grow\" :class=\"{'lg:w-3/5': !showComments}\">\n          {{ title }}\n        </h2>\n        <div v-show=\"!showComments\" v-if=\"commentManager\" class=\"flex justify-between items-center lg:w-2/5 px-2 py-1 pb-0 bg-gray-100 rounded-lg\">\n          <h3>\n            <icon-cheveron-right class=\"inline cursor-pointer\" @click=\"showComments = true\" />\n            Comments\n            <badge :color=\"countColor\">\n              {{ sectionComments.length }}\n            </badge>\n          </h3>\n        </div>\n      </header>\n      <div>\n        <div>\n          <slot />\n        </div>\n      </div>\n    </div>\n\n    <div v-show=\"showComments && commentManager\" class=\"lg:w-2/5 p-2 bg-gray-100 rounded-lg mb-2\">\n      <div class=\"flex justify-between items-center\">\n        <h3>\n          <icon-cheveron-down class=\"inline cursor-pointer\" @click=\"showComments = false\" />\n          Comments\n        </h3>\n      </div>\n      <ul>\n        <li v-for=\"comment in sectionComments\" :key=\"comment.id\" class=\"bg-white p-2\">\n          <ReviewComment :comment=\"comment\" :comment-manager=\"commentManager\" />\n        </li>\n      </ul>\n      <div class=\"bg-white mt-2 p-2\">\n        <ReviewCommentForm\n          v-if=\"showCommentForm\"\n          :section=\"name\"\n          :comment-manager=\"commentManager\"\n          @saved=\"showCommentForm = false\"\n          @canceled=\"showCommentForm = false\"\n        />\n        <button v-else class=\"btn btn-xs block\" @click=\"showCommentForm = true\">\n          Add comment\n        </button>\n      </div>\n    </div>\n  </section>\n</template>\n","<script setup>\n    import { computed, ref } from 'vue'\n    import CredentialsView from '../people/CredentialsView.vue';\n    import ExpertisesView from '../people/ExpertisesView.vue';\n\n    const props = defineProps({\n        members: {\n            required: true,\n            type: Array\n        },\n    });\n\n    const role_priorities = {\n        'Chair': 1,\n        'Coordinator': 2,\n        'Grant Liaison': 3,\n        'Biocurator': 4,\n        'Expert': 5,\n    };\n\n    const rolePriority = (role) => {\n        return role_priorities[role.display_name] ?? Infinity;\n    }\n\n    const tableSort = ref({\n        field: 'roles',\n        desc: false\n    });\n\n    const nameSort = (a, b) => {\n        let cmp = a.last_name.localeCompare(b.last_name);\n        if (cmp === 0) {\n            cmp = a.first_name.localeCompare(b.first_name);\n        }\n        return cmp;\n    }\n\n    const fields = ref([\n        {\n            name: 'name',\n            sortable: true,\n            label: 'Name',\n            sortFunction: nameSort,\n        },\n        {\n            name: 'legacy_credentials',\n            sortable: false,\n            label: 'Credentials',\n        },\n        {\n            name: 'roles',\n            sortable: true,\n            label: 'Roles',\n            sortFunction: (a, b) => {\n                return a.role_priority - b.role_priority;\n            },\n        },\n        {\n            name: 'legacy_expertise',\n            sortable: false,\n            label: 'Expertise',\n        },\n        {\n            name: 'institution',\n            sortable: false,\n            label: 'Institution',\n        },\n    ]);\n\n    const tableRows = computed( () => {\n        return props.members.map(m => {\n            const roles = m.roles.toSorted((a, b) => a.id - b.id);\n            return {\n                id: m.id,\n                first_name: m.person.first_name,\n                last_name: m.person.last_name,\n                name: m.person.name,\n                institution: m.person.institution?.name,\n                legacy_credentials: m.person.legacy_credentials,\n                legacy_expertise: m.legacy_expertise,\n                roles,\n                role_priority: Math.min(...roles.map(rolePriority)),\n                active: m.isActive,\n                person: m.person\n            }\n        }).filter(m => m.active);\n    });\n\n    const defaultAdd = (obj, key) => {\n        // like a python defaultdict...\n        if (!obj[key]) {\n            obj[key] = 0;\n        }\n        obj[key]++;\n    }\n\n    const counts = computed(() => {\n        const counts = {};\n        counts.Total = tableRows.value.length;\n        // eslint-disable-next-line no-console\n        console.log(tableRows.value);\n        Object.keys(role_priorities).forEach(r => counts[r] = 0);\n        tableRows.value.forEach(m => {\n            m.roles.forEach(r => defaultAdd(counts, r.display_name));\n            if (m.roles.length === 0) {\n                defaultAdd(counts, 'None');\n            }\n        });\n        return counts;\n    });\n\n</script>\n<template>\n  <div>\n    <div v-for=\"(count, role) in counts\" :key=\"role\">\n      <span>{{ role }}: {{ count }}</span>\n    </div>\n    <data-table\n      v-model:sort=\"tableSort\"\n      :fields=\"fields\"\n      :data=\"tableRows\"\n      class=\"text-xs\"\n    >\n      <template #cell-roles=\"{item}\">\n        <span>{{ item.roles.map(r => r.display_name).join(', ') }}</span>\n      </template>\n      <template #cell-legacy_credentials=\"{item}\">\n        <CredentialsView :person=\"item.person\" />\n      </template>\n      <template #cell-legacy_expertise=\"{item}\">\n        <ExpertisesView :person=\"item.person\" :legacy-expertise=\"item.legacy_expertise\" />\n      </template>\n    </data-table>\n  </div>\n</template>\n","<script setup>\n    import {useStore} from 'vuex';\n    import { computed} from 'vue'\n    import ReviewSection from '@/components/expert_panels/ReviewSection.vue'\n    import ReviewMembership from '@/components/expert_panels/ReviewMembership.vue'\n    import { formatDate } from '@/date_utils'\n\n    const store = useStore();\n    const group = computed(() => store.getters['groups/currentItemOrNew'])\n    const expertPanel = computed(() => group.value.expert_panel);\n    const members = computed( () => {\n        if (!group.value) {\n            return [];\n        }\n        return group.value.members;\n    });\n\n    const basicInfo = computed(() => {\n        return {\n            type: group.value.type.name ? group.value.type.name.toUpperCase() : '',\n            long_base_name: expertPanel.value.long_base_name,\n            short_base_name: expertPanel.value.short_base_name,\n        }\n    });\n</script>\n\n<template>\n  <div class=\"space-y-4\">\n    <ReviewSection title=\"Basic Information\" name=\"basic-info\">\n      <object-dictionary :obj=\"basicInfo\" label-class=\"w-40 font-bold\" />\n      <dictionary-row label=\"CDWG\" label-class=\"w-40 font-bold\">\n        {{ group.parent ? group.parent.name : '--' }}\n      </dictionary-row>\n    </ReviewSection>\n\n    <ReviewSection title=\"Membership\" name=\"membership\">\n      <ReviewMembership :members=\"members\" />\n\n      <div v-if=\"group.is_vcep_or_scvcep\" class=\"mt-6\">\n        <h4>Expertise of VCEP members</h4>\n        <blockquote>\n          <markdown-block :markdown=\"expertPanel.membership_description\" />\n        </blockquote>\n      </div>\n    </ReviewSection>\n\n    <ReviewSection title=\"Scope\" name=\"scope\">\n      <h3>Genes</h3>\n      <div class=\"mb-6\">\n        <p v-if=\"group.is_gcep\">\n          {{ expertPanel.genes.map(g => g.gene_symbol).join(', ') }}\n        </p>\n        <simple-table\n          v-if=\"group.is_vcep_or_scvcep\"\n          :data=\"\n            expertPanel.genes.map((g) => ({\n              id: g.id,\n              gene: g.gene_symbol,\n              disease: g.disease_name,\n            }))\n          \"\n          key-by=\"id\"\n          :hide-columns=\"['id']\"\n        />\n      </div>\n\n      <h3>Description of scope</h3>\n      <blockquote><markdown-block :markdown=\"expertPanel.scope_description\" /></blockquote>\n    </ReviewSection>\n\n    <ReviewSection v-if=\"group.is_gcep\" title=\"Plans\" name=\"plans\">\n      <dictionary-row label=\"Selected protocol\" label-class=\"w-48 font-bold\">\n        <div class=\"flex-none\">\n          {{ expertPanel.curation_review_protocol ? titleCase(expertPanel.curation_review_protocol.full_name) : null }}\n          <p v-if=\"expertPanel.curation_review_protocol_id == 100\" class=\"mt-1\">\n            <em>Details:</em> {{ expertPanel.curation_review_protocol_other }}\n          </p>\n        </div>\n      </dictionary-row>\n    </ReviewSection>\n\n    <ReviewSection v-if=\"group.is_gcep\" title=\"Attestations\" name=\"attestations\">\n      <dictionary-row label=\"GCEP Attestation Signed\" label-class=\"w-52 font-bold\">\n        {{ formatDate(expertPanel.gcep_attestation_date) }}\n      </dictionary-row>\n      <dictionary-row label=\"GCI Training Date\" label-class=\"w-52 font-bold\">\n        {{ formatDate(expertPanel.gci_training_date) }}\n      </dictionary-row>\n      <dictionary-row label=\"NHGRI Attestation Signed\" label-class=\"w-52 font-bold\">\n        {{ formatDate(expertPanel.nhgri_attestation_date) }}\n      </dictionary-row>\n    </ReviewSection>\n\n    <ReviewSection\n      v-if=\"group.is_vcep_or_scvcep\"\n      title=\"Attestations\"\n      name=\"attestations\"\n    >\n      <dictionary-row\n        label=\"Reanalysis and Discrepancy Resolution Attestation Signed\"\n        label-class=\"w-52 font-bold\"\n      >\n        {{ formatDate(expertPanel.reanalysis_attestation_date) }}\n      </dictionary-row>\n      <dictionary-row label=\"NHGRI Attestation Signed\" label-class=\"w-60 font-bold\">\n        {{ formatDate(expertPanel.nhgri_attestation_date) }}\n      </dictionary-row>\n    </ReviewSection>\n  </div>\n</template>\n","<script setup>\n    import EvidenceSummaryList from '@/components/expert_panels/EvidenceSummaryList.vue'\n    import {computed, watch } from 'vue'\n    import {useStore} from 'vuex'\n    import ReviewSection from '@/components/expert_panels/ReviewSection.vue'\n\n    const store = useStore();\n    const group = computed(() => store.getters['groups/currentItemOrNew'])\n    const expertPanel = computed(() => group.value.expert_panel)\n\n    watch(() => group.value, (to, from) => {\n        if ((to.id && (!from || to.id !== from.id))) {\n            store.dispatch('groups/getEvidenceSummaries', group.value);\n        }\n    });\n</script>\n\n<template>\n  <div class=\"application-review p-2 bg-gray-100\">\n    <ReviewSection\n      v-if=\"expertPanel.has_approved_pilot\"\n      title=\"Plans for Ongoing Review and Discrepancy Resolution\"\n      name=\"discrepency-review\"\n    >\n      <dictionary-row label=\"Selected protocol\" label-width-class=\"w-48 font-bold\">\n        <div class=\"w-full\">\n          {{ expertPanel.curation_review_protocol ? titleCase(expertPanel.curation_review_protocol.full_name) : null }}\n          <p v-if=\"expertPanel.curation_review_protocol_id == 100\" class=\"mt-1\">\n            <em>Details:</em> {{ expertPanel.curation_review_protocol_other }}\n          </p>\n        </div>\n      </dictionary-row>\n      <dictionary-row label=\"Notes\" label-width-class=\"w-48 font-bold\">\n        <markdown-block :markdown=\"expertPanel.curation_review_process_notes\" />\n      </dictionary-row>\n    </ReviewSection>\n\n    <ReviewSection\n      v-if=\"expertPanel.has_approved_pilot\"\n      title=\"Evidence Summaries\"\n      name=\"evidence-summaries\"\n    >\n      <EvidenceSummaryList :readonly=\"true\" />\n    </ReviewSection>\n\n    <ReviewSection\n      v-if=\"expertPanel.has_approved_pilot\"\n      title=\"Core Approval Member, Trained Biocurator, and Biocurator Trainer Designation\"\n      name=\"member-designation\"\n    >\n      <dictionary-row label=\"Core Approval Members\" label-width-class=\"w-48 font-bold\">\n        {{ group.coreApprovalMembers.map(m => m.person.name).join(', ') }}\n      </dictionary-row>\n      <dictionary-row label=\"Biocurator Trainers\" label-width-class=\"w-48 font-bold\">\n        {{ group.biocuratorTrainers.map(m => m.person.name).join(', ') }}\n      </dictionary-row>\n      <dictionary-row label=\"Trained Biocurators\" label-width-class=\"w-48 font-bold\">\n        {{ group.trainedBiocurators.map(m => m.person.name).join(', ') }}\n      </dictionary-row>\n    </ReviewSection>\n\n    <!-- <div v-if=\"!expertPanel.has_appoved_pilot\" class=\"screen-block\">\n                No approved pilot.\n            </div> -->\n  </div>\n</template>\n"],"names":["BaseRepository","baseUrl","options","params","queryString","queryStringFromParams","api","response","id","data","item","i","commentRepository","types","commentManagerFactory","subjectType","subjectId","comments","ref","openComments","computed","c","openRequirements","openSuggestions","commentsForEp","openInternal","findCommentIndex","comment","BaseEntityForm","fields","repository","newItem","isValidationError","CommentTypeRepository","results","typeRepository","commentTypes","getCommentTypes","items","commentFormFactory","props","__props","emits","__emit","group","inject","formDef","formDefFactory","onMounted","typeFieldIdx","f","errors","newComment","value","cancel","create","update","save","store","useStore","replyManager","showEditForm","showConfirmDelete","getVariant","initDelete","deleteComment","toggleResolution","updatedCmt","showReplyList","showReplies","rsp","toggleReplies","showReplyForm","initReply","handleNewReply","commentClone","handleReplyRemoved","canEdit","hasPermission","commentManager","showCommentForm","showComments","sectionComments","countColor","role_priorities","rolePriority","role","tableSort","a","b","cmp","tableRows","m","roles","_a","defaultAdd","obj","key","counts","r","expertPanel","members","basicInfo","watch","to","from"],"mappings":"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"}