{"version":3,"file":"js/group-list.e66bc4e7.js","mappings":"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","sources":["webpack://epam/./src/forms/form_factory.js","webpack://epam/./src/components/groups/GroupForm.vue","webpack://epam/./src/components/groups/GroupForm.vue?fb8f","webpack://epam/./src/views/groups/GroupList.vue","webpack://epam/./src/views/groups/GroupList.vue?951c"],"sourcesContent":["import {ref} from 'vue'\nimport is_validation_error from '@/http/is_validation_error'\nimport api from '@/http/api'\n\nexport const errors = ref({});\nconst editing = ref(false);\nconst hideForm = () => {\n    editing.value = false;\n    errors.value = {};\n}\nexport const submitFormData = async ({method, url, data}) => {\n    try {\n        // return await api.put(\n        return await api({\n            method,\n            url, \n            data\n        }).then(response => response.data.data)\n    } catch (error) {\n        if (is_validation_error(error)) {\n            errors.value = {...errors, ...error.response.data.errors}\n        }\n    }\n}\n\nexport const resetErrors = () => {\n    errors.value = {};\n}\n\nexport default () => {\n    return {\n        errors,\n        editing,\n        hideForm,\n        submitFormData,\n        resetErrors,\n    }\n}","<template>\n    <div>\n        <input-row\n            v-if=\"canSetType\"\n            v-model=\"group.group_type_id\"\n            :errors=\"errors.group_type_id\"\n            type=\"select\"\n            :options=\"typeOptions\"\n            label=\"Type\"\n        />\n\n        <dictionary-row label=\"Type\" v-else>\n            {{ this.group?.type?.display_name }}\n        </dictionary-row>\n\n        <transition name=\"slide-fade-down\" mode=\"out-in\">\n            <div v-if=\"group.group_type_id > 2 && group.expert_panel\">\n                <input-row\n                    label=\"Long Base Name\"\n                    v-model=\"group.expert_panel.long_base_name\"\n                    @update:modelValue=\"emitUpdate\"\n                    placeholder=\"Long base name\"\n                    :errors=\"errors.long_base_name\"\n                    input-class=\"w-full\"\n                />\n                <input-row\n                    label=\"Short Base Name\"\n                    v-model=\"group.expert_panel.short_base_name\"\n                    @update:modelValue=\"emitUpdate\"\n                    placeholder=\"Short base name\"\n                    :errors=\"errors.short_base_name\"\n                    input-class=\"w-full\"\n                />\n                <div v-if=\"hasAnyPermission(['groups-manage'])\">\n                    <input-row\n                        label=\"Affiliation ID\"\n                        v-model=\"group.expert_panel.affiliation_id\"\n                        :placeholder=\"affiliationIdPlaceholder\"\n                        :errors=\"errors.affiliation_id\"\n                        input-class=\"w-full\"\n                        @update:modelValue=\"emitUpdate\"\n                    >\n                        <template v-slot:label>\n                            Affiliation ID\n                            <note>admin-only</note>\n                        </template>\n                    </input-row>\n                </div>\n                <dictionary-row label=\"Affiliation ID\" v-else>\n                    <span v-if=\"group.expert_panel.affiliation_id\">{{group.expert_panel.affiliation_id}}</span>\n                    <span v-else class=\"text-gray-400\">{{'Not yet assigend'}}</span>\n                </dictionary-row>\n            </div>\n            <div v-else>\n                <input-row\n                    v-model=\"group.name\"\n                    placeholder=\"Name\"\n                    label=\"Name\"\n                    input-class=\"w-full\"\n                    :errors=\"errors.name\"\n                    @update:modelValue=\"emitUpdate\"\n                />\n            </div>\n        </transition>\n        <div v-if=\"hasPermission('groups-manage')\">\n            <input-row\n                v-model=\"group.group_status_id\"\n                type=\"select\"\n                :options=\"statusOptions\"\n                :errors=\"errors.group_status_id\"\n                @update:modelValue=\"emitUpdate\"\n            >\n                <template v-slot:label>\n                    Status:\n                    <note>admin-only</note>\n                </template>\n            </input-row>\n\n            <input-row\n                v-model=\"group.parent_id\"\n                type=\"select\"\n                :options=\"parentOptions\"\n                :errors=\"errors.parent_id\"\n                @update:modelValue=\"emitUpdate\"\n            >\n                <template v-slot:label>\n                    Parent group:\n                    <note>admin-only</note>\n                </template>\n            </input-row>\n        </div>\n    </div>\n</template>\n<script>\nimport {sortBy} from 'lodash'\nimport {isValidationError} from '@/http'\nimport {api} from '@/http'\nimport Group from '@/domain/group'\nimport configs from '@/configs'\nimport formFactory from '@/forms/form_factory'\n\nexport default {\n    name: 'GroupForm',\n    emits: [\n        'canceled',\n        'saved',\n        'update'\n    ],\n    data() {\n        return {\n            groupTypes: configs.groups.types,\n            groupStatuses: configs.groups.statuses,\n            newGroup: new Group(),\n            parents: []\n        }\n    },\n    computed: {\n        group: {\n            get() {\n                const group = this.$store.getters['groups/currentItem'];\n                if (group) {\n                    return group;\n                }\n                return this.newGroup;\n            },\n            set (value) {\n                try {\n                    this.$store.commit(\"groups/addItem\", value);\n                } catch (e) {\n                    this.newGroup = value;\n                }\n            }\n        },\n        statusOptions () {\n            return Object.values(this.groupStatuses).map(status => ({value: status.id, label: this.titleCase(status.name)}))\n        },\n        typeOptions () {\n            return Object.values(this.groupTypes).map(type => ({value: type.id, label: type.display_name}));\n        },\n        canSetType() {\n            return this.hasPermission('groups-manage') && !this.group.id\n        },\n        affiliationIdPlaceholder () {\n            return 50000\n        },\n        cdwgs () {\n            return this.$store.getters['cdwgs/all']\n        },\n        namesDirty () {\n            return this.group.expert_panel.isDirty('long_base_name')\n                || this.group.expert_panel.isDirty('short_base_name');\n        },\n        affiliationIdDirty () {\n            return this.group.expert_panel.isDirty('affiliation_id');\n        },\n        parentOptions () {\n            const options = [{value: 0, label: 'None'}];\n            this.parents\n                .filter(group => group.type.can_be_parent)\n                .forEach(parent => {\n                    options.push({value: parent.id, label: parent.displayName})\n                })\n\n            return sortBy(options, 'label');\n        }\n    },\n    methods: {\n        async save() {\n            this.resetErrors();\n            try {\n                if (this.group.id) {\n                    await this.updateGroup();\n                    this.$emit('saved');\n\n                    // this.$store.dispatch('groups/find', this.group.uuid);\n                    // this.$store.commit('pushSuccess', 'Group info updated.');\n                    return;\n                }\n\n                const newGroup = await this.createGroup()\n                                    .then(response => response.data.data);\n                this.$emit('saved');\n                this.$store.commit('pushSuccess', 'Group created.');\n                this.$router.push({name: 'AddMember', params: {uuid: newGroup.uuid}});\n            } catch (error) {\n                if (isValidationError(error)) {\n                    this.errors = error.response.data.errors;\n                }\n                throw error;\n            }\n        },\n        createGroup () {\n            let {\n                name,\n                parent_id,\n                group_type_id,\n                group_status_id\n            } = this.group.attributes;\n\n            const {short_base_name} = this.group.expert_panel;\n\n            if (name === null && this.group.expert_panel) {\n                name = this.group.expert_panel.long_base_name;\n            }\n\n            return this.$store.dispatch(\n                'groups/create',\n                {\n                    name,\n                    parent_id,\n                    group_type_id,\n                    group_status_id,\n                    short_base_name\n                }\n            );\n        },\n        updateGroup () {\n            const promises = [];\n            promises.push(this.saveGroupData());\n            if (this.group.expert_panel) {\n                promises.push(this.saveEpData());\n            }\n\n            return Promise.all(promises);\n        },\n        saveGroupData () {\n            const promises = [];\n            if (this.group.isDirty('parent_id')) {\n                promises.push(this.saveParent());\n            }\n\n            if (this.group.isDirty('name')) {\n                promises.push(this.saveName())\n            }\n\n            if (this.group.isDirty('group_status_id')) {\n                promises.push(this.saveStatus())\n            }\n\n            return Promise.all(promises);\n        },\n        async saveEpData() {\n            const promises = []\n            if (this.namesDirty) {\n                const {long_base_name, short_base_name} = this.group.expert_panel;\n                promises.push(this.submitFormData({\n                    method: 'put',\n                    url: `/api/groups/${this.group.uuid}/expert-panel/name`,\n                    data: { long_base_name, short_base_name }\n                }));\n            }\n\n            if (this.affiliationIdDirty) {\n                promises.push(this.submitFormData({\n                    method: 'put',\n                    url: `/api/groups/${this.group.uuid}/expert-panel/affiliation-id`,\n                    data: { affiliation_id: this.group.expert_panel.affiliation_id }\n                }));\n            }\n\n            return await Promise.all(promises);\n        },\n\n        isDirty (attribute) {\n            return this.group[attribute] != this.group[attribute]\n        },\n\n        saveParent () {\n            return this.submitFormData({\n                method: 'put',\n                url: `/api/groups/${this.group.uuid}/parent`,\n                data: { parent_id: this.group.parent_id }\n            })\n        },\n        saveName () {\n            return this.submitFormData({\n                method: 'put',\n                url: `/api/groups/${this.group.uuid}/name`,\n                data: {name: this.group.name}\n            })\n        },\n        saveStatus () {\n            return this.submitFormData({\n                method: 'put',\n                url: `/api/groups/${this.group.uuid}/status`,\n                data: {status_id: this.group.group_status_id}\n            })\n        },\n        resetData () {\n            if (this.group.uuid) {\n                this.$store.dispatch('groups/find', this.group.uuid);\n            }\n        },\n        cancel() {\n            if (this.group.uuid) {\n                this.resetData();\n            }\n            this.$emit('canceled');\n        },\n        async getParentOptions () {\n            const params = {\n                'where[group_type_id]': [1,2],\n                without: ['coordinators', 'expertPanel']\n            };\n\n            this.parents = await api.get(`/api/groups`, {params})\n                        .then(response => {\n                            return response.data\n                                .filter(group => group.id != this.group.id)\n                                .map(g => new Group(g))\n                        });\n        },\n        emitUpdate () {\n            this.$emit('update');\n        }\n    },\n    beforeMount() {\n        this.getParentOptions();\n        this.$store.dispatch('cdwgs/getAll');\n    },\n    setup (props, context) {\n        const {errors, submitFormData, resetErrors} = formFactory(props, context)\n\n        return {\n            errors,\n            submitFormData,\n            resetErrors\n        }\n    }\n}\n</script>\n","import { render } from \"./GroupForm.vue?vue&type=template&id=410c5d76\"\nimport script from \"./GroupForm.vue?vue&type=script&lang=js\"\nexport * from \"./GroupForm.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/bpow/src/clingen/gpm/resources/app/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n    <div>\n        <h1 class=\"flex justify-between items-center\">\n            Groups\n            <button v-if=\"hasPermission('groups-manage')\" class=\"btn btn-xs\" @click=\"startCreateGroup\">Create a group</button>\n        </h1>\n        <tabs-container @tab-changed=\"getGroupsForType\">\n            <tab-item v-for=\"def in tabDefinitions\" :label=\"def.label\" :key=\"def.label\">\n                <div class=\"text-center w-full\" v-if=\"loading\">Loading...</div>\n                <div v-else>\n                    <div class=\"mb-2\">\n                        Filter: <input type=\"text\" v-model=\"filterString\" placeholder=\"name,id,status,coordinator name\">\n                    </div>\n                    <data-table\n\n                        :data=\"filteredGroups.filter(def.filter)\"\n                        :fields=\"fields\"\n                        v-model:sort=\"sort\"\n                        :row-click-handler=\"goToGroup\"\n                        v-remaining-height\n                        row-class=\"cursor-pointer active:bg-blue-100\"\n                    >\n                        <template v-slot:cell-displayStatus=\"{item}\">\n                            <badge class=\"text-xs\" :color=\"item.statusColor\">\n                                {{ item.displayStatus\n                                }}<span v-if=\"item.status.id == 1 && item.is_ep\"\n                                    >&nbsp;-&nbsp;{{\n                                        item.expert_panel.currentStepAbbr\n                                    }}</span\n                                >\n                            </badge>\n                        </template>\n                        <template v-slot:cell-coordinators=\"{value}\">\n                            <div v-if=\"value.length == 0\"></div>\n                            <span v-for=\"(coordinator, idx) in value\" :key=\"coordinator.id\">\n                                <span v-if=\"idx > 0\">, </span>\n                                <router-link\n                                    :to=\"{name: 'PersonDetail', params: {uuid: coordinator.person.uuid}}\"\n                                    class=\"link\"\n                                    @click.stop\n                                >\n                                    {{coordinator.person.name}}\n                                </router-link>\n                            </span>\n                        </template>\n                    </data-table>\n                </div>\n            </tab-item>\n        </tabs-container>\n\n        <modal-dialog v-model=\"showCreateForm\" title=\"Create a New Group\" size=\"sm\">\n            <submission-wrapper @submitted=\"$refs.groupForm.save()\" @canceled=\"$refs.groupForm.cancel()\">\n                <group-form ref='groupForm' @canceled=\"showCreateForm=false\" @saved=\"showCreateForm = false\" />\n            </submission-wrapper>\n        </modal-dialog>\n    </div>\n</template>\n<script>\nimport {useStore} from 'vuex'\nimport {useRouter} from 'vue-router'\nimport {computed, ref} from 'vue'\nimport GroupForm from '@/components/groups/GroupForm.vue'\nimport SubmissionWrapper from '@/components/groups/SubmissionWrapper.vue'\n\nexport default {\n    name: 'ComponentName',\n    components: {\n        GroupForm,\n        SubmissionWrapper\n    },\n    props: {\n\n    },\n    data() {\n        return {\n            loading: false,\n            showCreateForm: false,\n            loadedFor: {\n                'VCEPs': false,\n                'GCEPs': false,\n                'CDWGs': false,\n                'WGs': false,\n            },\n            sort: {\n                field: 'id',\n                desc: false\n            },\n            fields: [\n                {\n                    name: 'id',\n                    label: 'ID',\n                    sortable: true\n                },\n                {\n                    name: 'name',\n                    label: 'Name',\n                    sortable: true,\n                    resolveValue: (item) => {\n                        return item.displayName\n                    }\n                },\n                {\n                    name: 'coordinators',\n                    sortable: false\n                },\n                {\n                    name: 'displayStatus',\n                    sortable: true,\n                    label: 'status'\n                },\n            ]\n        }\n    },\n    methods: {\n        startCreateGroup () {\n            this.showCreateForm = true;\n        },\n        async getGroupsForType (tabLabel) {\n            const typeTab = this.tabDefinitions.find(t => t.label === tabLabel);\n            if (this.loadedFor[tabLabel]) {\n                return;\n            }\n            this.loading = true;\n            await this.$store.dispatch('groups/getItems', {where: {group_type_id: typeTab.typeId}});\n            this.loadedFor[tabLabel] = true;\n            this.loading = false;\n        }\n\n    },\n    setup() {\n        const store = useStore();\n        const router = useRouter();\n\n\n        const tabDefinitions = computed( () => {\n            const tabs = [\n                {\n                    label: 'VCEPs',\n                    typeId: 4,\n                    filter: (g) => g.is_vcep_or_scvcep,\n                },\n                {\n                    label: 'GCEPs',\n                    typeId: 3,\n                    filter: (g) => g.is_gcep,\n                },\n{\n                    label: 'CDWGs',\n                    typeId: 2,\n                    filter: g => g.isCdwg()\n                },\n                {\n                    label: 'WGs',\n                    typeId: 1,\n                    filter: g => g.isWg()\n                },\n            ];\n\n            return tabs;\n        })\n\n\n\n        const filterString = ref(null);\n\n        const groups = computed(() => store.getters['groups/all']);\n\n        const filteredGroups = computed(() => groups.value.filter(group => {\n            if (!filterString.value) {\n                return true;\n            }\n\n            const pattern = new RegExp(`.*${filterString.value}.*`, 'i');\n\n            return group.name && group.name.match(pattern)\n                || group.displayName && group.displayName.match(pattern)\n                || (\n                    group.expert_panel &&\n                    group.expert_panel.full_short_base_name &&\n                    group.expert_panel.full_short_base_name.match(pattern)\n                )\n                || group.id == filterString.value\n                || group.status.name.match(pattern)\n                || (\n                    group.expert_panel &&\n                    group.expert_panel.currentStepName &&\n                    group.expert_panel.currentStepName.match(pattern)\n                    )\n                || group.coordinators.filter(c => c.person.name.match(pattern)).length > 0\n        }))\n\n        const goToItem = (item) => {\n            router.push({\n                name: 'GroupDetail',\n                params: {uuid: item.uuid}\n            })\n        }\n\n        return {\n            filterString,\n            groups,\n            filteredGroups,\n            tabDefinitions,\n            goToItem,\n            goToGroup: goToItem,\n        }\n    }\n\n}\n</script>\n","import { render } from \"./GroupList.vue?vue&type=template&id=5fdd6be0\"\nimport script from \"./GroupList.vue?vue&type=script&lang=js\"\nexport * from \"./GroupList.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/bpow/src/clingen/gpm/resources/app/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["errors","ref","editing","hideForm","value","submitFormData","async","method","url","data","api","then","response","error","is_validation_error","resetErrors","class","_createElementBlock","$options","_createBlock","_component_input_row","group_type_id","$event","$setup","type","options","label","_component_dictionary_row","group","display_name","_createVNode","_Transition","name","mode","expert_panel","_hoisted_1","long_base_name","placeholder","short_base_name","_ctx","_hoisted_2","affiliation_id","_component_note","_hoisted_5","_toDisplayString","_hoisted_7","_hoisted_8","group_status_id","parent_id","emits","groupTypes","configs","groups","types","groupStatuses","statuses","newGroup","Group","parents","computed","get","this","$store","getters","set","commit","e","statusOptions","Object","values","map","status","id","titleCase","typeOptions","canSetType","hasPermission","affiliationIdPlaceholder","cdwgs","namesDirty","isDirty","affiliationIdDirty","parentOptions","filter","can_be_parent","forEach","parent","push","displayName","sortBy","methods","updateGroup","$emit","createGroup","$router","params","uuid","isValidationError","attributes","dispatch","promises","saveGroupData","saveEpData","Promise","all","saveParent","saveName","saveStatus","attribute","status_id","resetData","cancel","without","g","emitUpdate","beforeMount","getParentOptions","setup","props","context","formFactory","__exports__","render","_createElementVNode","onClick","_component_tabs_container","onTabChanged","_Fragment","_renderList","def","_component_tab_item","key","$data","_hoisted_4","_component_data_table","fields","sort","_withCtx","item","_component_badge","color","statusColor","displayStatus","is_ep","currentStepAbbr","length","coordinator","idx","_hoisted_9","_component_router_link","to","person","_component_modal_dialog","title","size","_component_submission_wrapper","onSubmitted","groupForm","save","onCanceled","_component_group_form","onSaved","components","GroupForm","SubmissionWrapper","loading","showCreateForm","loadedFor","field","desc","sortable","resolveValue","startCreateGroup","tabLabel","typeTab","tabDefinitions","find","t","where","typeId","store","useStore","router","useRouter","tabs","is_vcep_or_scvcep","is_gcep","isCdwg","isWg","filterString","filteredGroups","pattern","RegExp","match","full_short_base_name","currentStepName","coordinators","c","goToItem","goToGroup"],"sourceRoot":""}